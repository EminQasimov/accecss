
/// DEBUG
/// Use it to debug your styles, it will add non obstrusive debugging lines
/// @param  {Value} $zones [false]        - Adds zones in css
/// @param  {Value} $colorBlind [false]   - Adds a grayscaled layer to debug for colorblind people
/// @param  {Value} $cbFilter [false]     - Adds a filtered layer over the app, corresponding to a certain color blind category
/// @param  {Value} $element [false]      - Give the name of the element you want to debug
///
/// Available filters : `Protanopia`, `Protanomaly`, `Deuteranopia`, `Deuteranomaly`, `Tritanopia`, `Tritanomaly`, `Achromatopsia`, `Achromatomaly`
///
/// 
/// Usage : 
/// `@include debug(<true:false>, <true:false>, <false:filterName>);` 
///
/// @group helpers
@mixin debug($zones: false, $colorBlind: false, $cbFilter: false, $element: false){

  @if $colorBlind == true and $element == false{
    html body{
      filter: grayscale(100%);
    }
  }
  
  @else if $colorBlind == false and $cbFilter != false{
    html body{
      filter: url('../filters.svg##{$cbFilter}') !important;
    }
  }
  

  @if $zones == true and $element == false {
/*
  CSS Debug : TRUE
*/
    *{
      box-shadow: inset 0 0 0 1px rgba(red, .1);
      &:hover{
        box-shadow: inset 0 0 0 1px rgba(red, 1);
      }
      + *{
        box-shadow: inset 0 0 0 1px rgba(blue, .1);
        &:hover{
          box-shadow: inset 0 0 0 1px rgba(blue, 1);
        }
        + *{
          box-shadow: inset 0 0 0 1px rgba(green, .1);
          &:hover{
            box-shadow: inset 0 0 0 1px rgba(green, 1);
          }
          + *{
            box-shadow: inset 0 0 0 1px rgba(red, .1);
            &:hover{
              box-shadow: inset 0 0 0 1px rgba(red, 1);
            }
            + *{
              box-shadow: inset 0 0 0 1px rgba(blue, .1);
              &:hover{
                box-shadow: inset 0 0 0 1px rgba(blue, 1);
              }
              +  *{
                box-shadow: inset 0 0 0 1px rgba(green, .1);
                &:hover{
                  box-shadow: inset 0 0 0 1px rgba(green, 1);
                }
              }
            }
          }
        }
      }
    }
  }
  
  // If given $element 
  @if $element != false {
     @if $colorBlind == true{
    #{$element} {
      filter: grayscale(100%);
    }
  }
  
  @else if $colorBlind == false and $cbFilter != false{
    #{$element} {
      filter: url('../css/filters.svg##{$cbFilter}') !important;
    }
  }
  

  @if $zones == true{
    #{$element}{
      *{
        box-shadow: inset 0 0 0 1px rgba(red, .1);
        &:hover{
          box-shadow: inset 0 0 0 1px rgba(red, 1);
        }
          + *{
            box-shadow: inset 0 0 0 1px rgba(blue, .1);
            &:hover{
              box-shadow: inset 0 0 0 1px rgba(blue, 1);
            }
            + *{
              box-shadow: inset 0 0 0 1px rgba(green, .1);
              &:hover{
                box-shadow: inset 0 0 0 1px rgba(green, 1);
              }
              + *{
                box-shadow: inset 0 0 0 1px rgba(red, .1);
                &:hover{
                  box-shadow: inset 0 0 0 1px rgba(red, 1);
                }
                + *{
                  box-shadow: inset 0 0 0 1px rgba(blue, .1);
                  &:hover{
                    box-shadow: inset 0 0 0 1px rgba(blue, 1);
                  }
                  +  *{
                    box-shadow: inset 0 0 0 1px rgba(green, .1);
                    &:hover{
                      box-shadow: inset 0 0 0 1px rgba(green, 1);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  

  @else{
/*
   CSS Debug : FALSE
*/
  }
}

// Mixin debug
// @include debug(<true:false>, <true:false>, <false:filterName>, <false:elementName>); 
// Param : 
//        [1]: css zone
//        [2]: Grayscale view
//        [3]: Colorblind filters 
//        [4]: Specified debug element

@include debug(true, true, tritanopia, 'body');